import java.util.Scanner;
import java.util.Stack;

public class Main {
	public static void main(String[] args) {
		Scanner scnr = new Scanner(System.in);
		System.out.println("Enter in your Expression");
		System.out.println(getExpression(scnr));
		
		
	}
	
	static String getExpression(Scanner scnr) {
		String input = scnr.nextLine();
		while(!input.matches("[a-z +\\-\\*\\/]+") && (input.length()<=100)) {
			System.out.println("Invalid syntax");
			input = scnr.nextLine();
		}
		return input;
	}
	
	static String getPostfixNotation(String input) {
		Stack<Character> operators = new Stack<Character>();
		input = input.replace(" ", "");
		char[] chars = input.toCharArray();
		char[] postFix = new char[100];
		
		String temp="";
		
		for(Character c:chars) {
			if(!c.equals('/') || !c.equals('*') || !c.equals('+') || !c.equals('-')) {
				temp += c;
				continue;
			}
			if(operators.isEmpty() || (getOperatorPrecedence(c) >= getOperatorPrecedence(operators.peek())) ) {
				operators.add(c);
				continue;
			}
			while(getOperatorPrecedence(c) >= getOperatorPrecedence(operators.peek())) {
				temp+=operators.pop();
			}
		}
		while(!operators.isEmpty()) {
			operators.pop();
		}
	}
	
	static int getOperatorPrecedence(Character c) {
		if(c.equals('*')|| c.equals('/'))
			return 2;
		return 1;
	}
}
