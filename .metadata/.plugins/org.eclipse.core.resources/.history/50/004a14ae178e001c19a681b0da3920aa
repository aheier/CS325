import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.Stack;

public class Main {
	public static void main(String[] args) {
		String input;
		Scanner scnr = new Scanner(System.in);
		System.out.println("Enter in your Expression");
		System.out.println(input = getExpression(scnr));
		System.out.println(getPostfixNotation(input));
		HashMap<Character, Integer> map = getValues(input, scnr);
		int value = calculatePostfix(input, map);
		System.out.printf("\nResult: %d", value);
		
	}
	
	static String getExpression(Scanner scnr) {
		String input = scnr.nextLine();
		while(!input.matches("[a-z +\\-\\*\\/]+") && (input.length()<=100)) {
			System.out.println("Invalid syntax");
			input = scnr.nextLine();
		}
		return input;
	}
	
	static String getPostfixNotation(String input) {
		Stack<Character> operators = new Stack<Character>();
		input = input.replace(" ", "");
		char[] chars = input.toCharArray();
		char[] postFix = new char[100];
		
		String temp="";
		
		for(Character c:chars) {
			System.out.println(c);
			if(c >= 97) {
				temp += c;
				continue;
			}
			if(operators.isEmpty() || (getOperatorPrecedence(c) > getOperatorPrecedence(operators.peek())) ) {
				operators.add(c);
				continue;
			}
			while(getOperatorPrecedence(c) <= getOperatorPrecedence(operators.peek()) ) {
				temp+=operators.pop();
				if(operators.isEmpty()) {
					operators.add(c);
					break;
				}
			}
		}
		while(!operators.isEmpty()) {
			temp+=operators.pop();
		}
		return temp;
	}
	
	static int getOperatorPrecedence(Character c) {
		if(c == '*' || c=='/') {
			System.out.println("here");
			return 2;
		}
		return 1;
	}
	
	static HashMap<Character, Integer> getValues(String input, Scanner scnr){
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();
		for(Character c : input.toCharArray()) {
			if(map.containsKey(c)) {
				continue;
			}
			System.out.printf("\n%s : ", c);
			while(true) {
				try {
					map.put(c, scnr.nextInt());
					break;
				}
				catch(InputMismatchException e) {
				}
			}
		}
		
		return map;		
	}
	
	static int calculatePostfix(String input, HashMap<Character, Integer> map) {
		int temp=0, first, second;
		Stack<Integer> operands = new Stack<Integer>();
		for(Character c : input.toCharArray()) {
			if(c >= 97) {
				operands.add(map.get(c));
				continue;
			}
			first = operands.pop();
			second = operands.pop();
			switch(c) {
			case '/':
				temp = second / first;
				break;
			case '*':
				temp = second * first;
				break;
			case '+':
				 temp = second + first;
				 break;
			case '-':
				temp = second - first;
				break;
			}
			operands.add(temp);
		}
		if(operands.size()> 0) {
			return operands.pop();
		}
		return 0;
	}
}
